name: Android Integration

on: [push, pull_request]

env:
  PYTHONFORANDROID_PREREQUISITES_INSTALL_INTERACTIVE: 0
  ANDROIDSDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_HOME: ${{ github.workspace }}/android-sdk
  ANDROID_NDK_HOME: ${{ github.workspace }}/android-sdk/ndk/25.2.9519653
  PATH: ${{ github.workspace }}/android-sdk/cmdline-tools/latest/bin:${{ github.workspace }}/android-sdk/platform-tools:${{ env.PATH }}

jobs:
  Integration:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          automake autoconf libtool pkg-config \
          build-essential python3-pip python3-setuptools \
          libssl-dev libffi-dev libsqlite3-dev libncurses-dev \
          liblzma-dev libbz2-dev libreadline-dev xz-utils tk-dev \
          libxml2-dev libxmlsec1-dev libjpeg-dev zlib1g-dev curl unzip zip

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install automake autoconf libtool pkg-config
        brew install openssl sqlite3 readline xz libffi libxml2 libxslt curl

    - name: Setup Android SDK Command line tools (Linux only)
      if: runner.os == 'Linux'
      run: |
        mkdir -p $ANDROIDSDK_ROOT/cmdline-tools
        cd $ANDROIDSDK_ROOT/cmdline-tools
        curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools.zip
        rm commandlinetools.zip
        mv cmdline-tools latest

    - name: Setup Android SDK Command line tools (macOS only)
      if: runner.os == 'macOS'
      run: |
        mkdir -p $ANDROIDSDK_ROOT/cmdline-tools
        cd $ANDROIDSDK_ROOT/cmdline-tools
        curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip
        unzip -q commandlinetools.zip
        rm commandlinetools.zip
        mv cmdline-tools latest

    - name: Add Android SDK tools to PATH
      run: echo "PATH=${ANDROIDSDK_ROOT}/cmdline-tools/latest/bin:${ANDROIDSDK_ROOT}/platform-tools:$PATH" >> $GITHUB_ENV

    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses

    - name: Install Android SDK packages
      run: |
        sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

    - name: Upgrade pip and install buildozer & cython
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython

    - name: Patch buildozer.spec for SDK license and p4a branch
      run: |
        sed -i.bak "s/# android.accept_sdk_license = False/android.accept_sdk_license = True/" buildozer.spec
        sed -i.bak "s/#p4a.branch = master/p4a.branch = develop/" buildozer.spec

    - name: Clean previous builds (optional)
      run: buildozer android clean || true

    - name: Debug Build APK
      run: buildozer android debug --verbose

    - name: Release Build AAB
      run: |
        export BUILDOZER_ALLOW_ORG_TEST_DOMAIN=1
        buildozer android release --verbose

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: bin/*.apk

    - name: Upload AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-aab-release
        path: bin/*.aab
